#define BUFFER_SIZE 512
static byte[] data_buffer = new byte[BUFFER_SIZE];
static byte[] hamming_buffer = new byte[BUFFER_SIZE * 2];
static ushort counter = 0;
void on_read_usart()
{
	if(counter == -1) return;
	byte data = read_byte() & 0b11111110;
	hamming_buffer[counter] = data;
	counter++;
	if(counter < BUFFER_SIZE * 2) return;
	process_received_data();
	counter = -1;
}

void process_received_data()
{
	ushort c = 0;
	byte local_hamming_buffer = -1;
	
	while(c < BUFFER_SIZE)
	{
		if(local_hamming_buffer == -1)
		{
			byte data = hamming_buffer[c * 2];
			local_hamming_buffer = data;
		}
		else
		{
			byte data = hamming_buffer[c * 2 + 1];
			data_buffer[c] = hamming_to_byte(local_hamming_buffer, data);
			local_hamming_buffer = -1;
			c++;
		}
	}

	display_checksum();
}

ushort get_checksum()
{
	ushort c = 0;
	ushort checksum = 0;
	while(c < BUFFER_SIZE)
	{
		checksum += data_buffer[c];
		c++;
	}
	return checksum;
}

void display_err();
void store_on_shield_buffer(ushort n);
