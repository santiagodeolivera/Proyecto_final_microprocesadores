#define BUFFER_SIZE 512
static byte[] data_buffer = new byte[BUFFER_SIZE + 2];

static bool state = false;
static ushort counter = 0;
static byte hamming_buffer = -1;
static short checksum = 0;
void main()
{

	if(!state)
	{
		write_data();
	}
	else
	{
		send_data();
	}
}

void write_data()
{
	byte number = generate_pseudorandom_number();
	data_buffer[counter] = number;
	checksum += number;
	counter++;
	if(counter == BUFFER_SIZE)
	{
		data_buffer[BUFFER_SIZE + 0] = checksum.high();
		data_buffer[BUFFER_SIZE + 1] = checksum.low();
		state = true;
		counter = 0;
	}
}

void send_data()
{
	if(counter >= BUFFER_SIZE + 2) return;
	if(!can_write()) return;

	if(~(hamming_buffer & 0b10000000))
	{
		UDR0 = hamming_buffer >> 1;
		hamming_buffer = -1;
		return;
	}

	write_byte(data_buffer[counter]);
	counter++;
}

bool can_write()
{
	return (UCSR0A & 0b00100000);
}

void write_byte(byte info)
{
	(byte hamm_high, byte hamm_low) = byte_to_hamming(info);
	UDR0 = hamm_high;
	hamming_buffer = hamm_low >> 1;
}

byte generate_pseudorandom_number()
{
	static byte pseudorandom_mem = 0b11111111;
	pseudorandom_mem ^= (pseudorandom_mem << 3);
	pseudorandom_mem ^= (pseudorandom_mem >> 5);
	return pseudorandom_mem;
}