
AVRASM ver. 2.2.8  C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\main.asm Fri Dec 03 18:57:20 2021

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\main.asm(8): Including file 'C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib.asm'
C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib.asm(1): Including file 'C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib/shield_lib.asm'
C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib.asm(2): Including file 'C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib/timer_lib.asm'
C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib.asm(3): Including file 'C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib/pointers_lib.asm'
C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib.asm(4): Including file 'C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib/math_lib.asm'
C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib.asm(5): Including file 'C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib/hamming_lib.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\main.asm(8): Including file 'C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib.asm'
C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib.asm(1): Including file 'C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib/shield_lib.asm'
C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib.asm(2): Including file 'C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib/timer_lib.asm'
C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib.asm(3): Including file 'C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib/pointers_lib.asm'
C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib.asm(4): Including file 'C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib/math_lib.asm'
C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib.asm(5): Including file 'C:\Users\santi\Programming\Studies\Proyecto_final_microprocesadores\receiver\src\lib/hamming_lib.asm'
                                 
                                 .ORG 0x0000
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
000000 940c 0039                 	JMP start
                                 .ORG 0x001C
00001c 940c 026f                 	JMP tmr0_start
                                 .ORG 0x0024
000024 940c 00a2                 	JMP usartR_start
                                 
                                 .INCLUDE "lib.asm"
                                 
                                 
                                 .MACRO SHIELDSETUP
                                 	PUSH r16
                                 	IN		r16,    DDRB
                                 	ORI		r16,    0b00000001
                                 	OUT		DDRB,	r16			; SD (serial data)
                                 
                                 	IN		r16,    PORTB
                                 	ORI		r16,    0b00000001
                                 	OUT		PORTB,	r16
                                 
                                 	IN		r16,	DDRD
                                 	ORI		r16,	0b10010000
                                 	OUT		DDRD,	r16
                                 	IN		r16,	PORTD
                                 	ANDI	r16,	0b01101111  ; SCLK (bit 7, serial clock) and LCH (bit 4, latch clock)
                                 	OUT		PORTD,	r16
                                 	POP r16
                                 .ENDMACRO
                                 
                                 ; Writes a digit into a concrete digit slot of the shield
                                 ; Parameters:
                                 ;     r16: The digit to write
                                 ;     r17: The digit slot
                                 write_shield: 
000026 940e 002e                 	CALL	write_bytes_into_PB0
000028 2c12                      	MOV		r1, r2
000029 940e 002e                 	CALL	write_bytes_into_PB0
00002b 9a5c                      	SBI		PORTD, 4		; LCHCLK = 1
00002c 985c                      	CBI		PORTD, 4		; LCHCLK = 0
00002d 9508                      	RET
                                 
                                 write_bytes_into_PB0:
00002e e028                      	LDI		r18, 0x08
                                 	PB0_loop:
00002f 985f                      		CBI		PORTD, 7		; SCLK = 0
000030 9416                      		LSR		r1
000031 f010                      		BRCS	PB0_set
000032 9828                      		CBI		PORTB, 0		; SD = 0
000033 c001                      		RJMP	PB0_set_end
                                 	PB0_set:
000034 9a28                      		SBI		PORTB, 0		; SD = 1
                                 	PB0_set_end:
000035 9a5f                      		SBI		PORTD, 7		; SCLK = 1
000036 952a                      		DEC		r18
000037 f7b9                      		BRNE	PB0_loop
000038 9508                      		RET
                                 
                                 .INCLUDE "lib/timer_lib.asm"
                                 
                                 ; TIMER0SETUP <timer_limit>
                                 .MACRO TIMER0SETUP
                                 	LDI r16, 0b00000010   ; Timer mode
                                 	OUT TCCR0A, r16
                                 	LDI r16, 0b00000101   ; Clock period
                                 	OUT TCCR0B, r16
                                 	LDI r16, @0           ; Timer limit
                                 	OUT OCR0A, r16
                                 	LDI r16, 0b00000010   ; Timer mask
                                 	STS TIMSK0, r16		
                                 .ENDMACRO
                                 
                                 ; Set up the timer 1 for match A comparison with a literal word limit
                                 ; TIMER1SETUP <timer_limit>
                                 .MACRO TIMER1SETUP
                                 	PUSH r16
                                 
                                 	LDI r16, 0b00000000   ; Timer mode
                                 	STS TCCR1A, r16
                                 
                                 	LDI r16, 0b00001101   ; Clock period
                                 	STS TCCR1B, r16
                                 
                                 	LDI r16, high(@0)     ; Timer limit (high byte)
                                 	STS OCR1AH, r16
                                 
                                 	LDI r16, low(@0)      ; Timer limit (low byte)
                                 	STS OCR1AL, r16
                                 
                                 	LDS r16, TIMSK1
                                 	ORI r16, 0b00000010   ; Timer mask
                                 	STS TIMSK1, r16
                                 
                                 	POP r16
                                 .ENDMACRO
                                 .INCLUDE "lib/pointers_lib.asm"
                                 
                                 ; STZ <value_to_store>
                                 .MACRO STZ
                                 	LDI r16, @0
                                 	ST Z+, r16
                                 .ENDMACRO
                                 
                                 ; Set the Z pointer to a literal word
                                 ; SETZ <pointer_location>
                                 .MACRO SETZ
                                 	LDI ZH, high(@0)
                                 	LDI ZL, low(@0)
                                 .ENDMACRO
                                 
                                 ; Add the content of a byte register into the Z pointer
                                 ; SUMZ <register>
                                 .MACRO SUMZ
                                 	ADD ZL, @0
                                 	BRCC PC+2
                                 		INC ZH
                                 .ENDMACRO
                                 
                                 ; Add the content of a word register to the Z pointer
                                 ; SUMZW <high_register> <low_register>
                                 .MACRO SUMZW
                                 	ADD ZH, @0
                                 	SUMZ @1
                                 .ENDMACRO
                                 
                                 ; Loads a byte from an array of bytes in SRAM
                                 ; LOADBYTEFROMSLICE <output> <input_pointer> <input_index>
                                 .MACRO LOADBYTEFROMSLICE
                                 	SETZ @1
                                 	SUMZ @2
                                 	LD @0, Z
                                 .ENDMACRO
                                 
                                 ; Stores a byte into an array of bytes in SRAM
                                 ; STOREBYTEINTOSLICE <output_pointer> <output_index> <input>
                                 .MACRO STOREBYTEINTOSLICE
                                 	SETZ @0
                                 	SUMZ @1
                                 	ST Z, @2
                                 .INCLUDE "lib/math_lib.asm"
                                 
                                 ; INTEGERDIVISION <dividend register> <literal divider> <quotient register>
                                 .MACRO INTEGERDIVISION
                                 	CLR @2
                                 	byte_to_digits_start:
                                 		CPI @0, @1
                                 		BRLO byte_to_digits_end
                                 		SUBI @0, @1
                                 		INC @2
                                 		RJMP byte_to_digits_start
                                 	byte_to_digits_end:
                                 .ENDMACRO
                                 
                                 ; Performs a 2-byte integer division, leaving the reminder in the dividend registers
                                 ; WORDINTEGERDIVISION <dividend's high register> <dividend's low register> <literal divider> <quotient's high register> <quotient's low register>
                                 .MACRO WORDINTEGERDIVISION
                                 	CLR @4
                                 	CLR @3
                                 	short_to_digits_start:
                                 		CPI @0, high(@2)
                                 			BRLO short_to_digits_end
                                 			BRNE short_to_digits_add
                                 		CPI @1, low(@2)
                                 			BRLO short_to_digits_end
                                 	short_to_digits_add:
                                 		SUBI @1, low(@2)
                                 		BRPL PC+2
                                 			DEC @0
                                 		SUBI @0, high(@2)
                                 		INC @4
                                 		BRNE PC+2
                                 			INC @3
                                 		RJMP short_to_digits_start
                                 	short_to_digits_end:
                                 .ENDMACRO
                                 
                                 ; Decreases a word by 1
                                 ; DECW <high_register> <low_register>
                                 .MACRO DECW
                                 	DEC @1
                                 	CPI @1, 0xFF
                                 	BRNE PC+2
                                 		DEC @0
                                 .ENDMACRO
                                 
                                 ; Increases a word by 1
                                 ; INCW <high_register> <low_register>
                                 .MACRO INCW
                                 	INC @1
                                 	BRNE PC+2
                                 		INC @0
                                 .ENDMACRO
                                 
                                 ; Performs a comparison between a word register and a word literal
                                 ; May only work with unsigned comparisions, though
                                 ; CPWI <high_register> <low_register> <literal>
                                 .MACRO CPWI
                                 	CPI @0, high(@2)
                                 	BRNE cpwi_end
                                 		CPI @1, low(@2)
                                 	cpwi_end:
                                 .ENDMACRO
                                 
                                 ; Performs a comparison between two word registers
                                 ; May only work with unsigned comparisions, though
                                 ; CPWI <register_1_high> <register_1_low> <register_2_high> <register_2_low>
                                 .MACRO CPW
                                 	CP @0, @2
                                 	BRNE cpw_end
                                 		CP @1, @3
                                 	cpw_end:
                                 .ENDMACRO
                                 
                                 ; Adds the content of a register into a word register
                                 ; ADDW1 <high_register_result> <low_register_result> <register>
                                 .MACRO ADDW1
                                 	ADD @1, @2
                                 	BRCC PC+2
                                 		INC @0
                                 .ENDMACRO
                                 
                                 ; Adds the content of a word register into another word register
                                 ; ADDW2 <high_register_result> <low_register_result> <register_high> <register_low>
                                 .MACRO ADDW2
                                 	ADD @0, @2
                                 	ADDW1 @0, @1, @3
                                 .ENDMACRO
                                 
                                 ; Adds the content of a byte register into a 3-byte register
                                 ; ADD3B1 <register_result_2> <register_result_1> <register_result_0> <register>
                                 .MACRO ADD3B1
                                 	ADD @2, @3
                                 	BRCC add3b1_end
                                 		INC @1
                                 	BRNE add3b1_end
                                 		INC @0
                                 	add3b1_end:
                                 .ENDMACRO
                                 .INCLUDE "lib/hamming_lib.asm"
                                 
                                 ; NIBBLETOHAMMING <input> <output> <reg2> <reg3>
                                 .MACRO NIBBLETOHAMMING
                                 	PUSH @0
                                 	PUSH @2
                                 	PUSH @3
                                 
                                 	CLR @2
                                 	CLR @1
                                 
                                 	; If byte 0 of input (I0) is set, output = output ^ 0b00001110
                                 	MOV @2, @0
                                 	ORI @2, 0b11111110
                                 	CPI @2, 0xFF
                                 	BRNE nibble_to_hamming_d3_end
                                 		LDI @3, 0b00001110
                                 		EOR @1, @3
                                 	nibble_to_hamming_d3_end:
                                 
                                 	; If byte 1 of input (I1) is set, output = output ^ 0b00001110
                                 	MOV @2, @0
                                 	ORI @2, 0b11111101
                                 	CPI @2, 0xFF
                                 	BRNE nibble_to_hamming_d5_end
                                 		LDI @3, 0b00110010
                                 		EOR @1, @3
                                 	nibble_to_hamming_d5_end:
                                 
                                 	; If byte 2 of input (I2) is set, output = output ^ 0b01010100
                                 	MOV @2, @0
                                 	ORI @2, 0b11111011
                                 	CPI @2, 0xFF
                                 	BRNE nibble_to_hamming_d6_end
                                 		LDI @3, 0b01010100
                                 		EOR @1, @3
                                 	nibble_to_hamming_d6_end:
                                 
                                 	; If byte 3 of input (I3) is set, output = output ^ 0b10010110
                                 	MOV @2, @0
                                 	ORI @2, 0b11110111
                                 	CPI @2, 0xFF
                                 	BRNE nibble_to_hamming_d7_end
                                 		LDI @3, 0b10010110
                                 		EOR @1, @3
                                 	nibble_to_hamming_d7_end:
                                 
                                 	; Result:
                                 	;    D7 = I3
                                 	;    D6 = I2
                                 	;    D5 = I1
                                 	;    P4 = I1 ^ I2 ^ I3 = D5 ^ D6 ^ D7
                                 	;    D3 = I0
                                 	;    P2 = I0 ^ I2 ^ I3 = D3 ^ D6 ^ D7
                                 	;    P1 = I0 ^ I1 ^ I3 = D5 ^ D5 ^ D7
                                 
                                 	POP @3
                                 	POP @2
                                 	POP @0
                                 .ENDMACRO
                                 
                                 ; Converts a hamming byte into a nibble, correcting it in the process
                                 ; HAMMINGTONIBBLE <input> <output> <reg1> <reg2> <reg3>
                                 .MACRO HAMMINGTONIBBLE
                                 	PUSH @0
                                 	PUSH @2
                                 	PUSH @3
                                 	PUSH @4
                                 
                                 	CLR @4
                                 	INC @4
                                 	CLR @1
                                 
                                 	; @4 represents a local byte variable with one bit set, whose position determines which byte to correct
                                 
                                 	; Make XOR of bytes 1, 3, 5 and 7
                                 	; Example: @0 = 0b01101001
                                 	MOV @2, @0
                                 	CLR @3
                                 	;                 76543210
                                 	;          @2 = 0b01101001
                                 	;          @3 = 0b00000000 <- @3[0] = 0
                                 	LSR @2
                                 	;                  7654321
                                 	;          @2 = 0b00110100
                                 	;          @3 = 0b00000000 <- @3[0] = 0
                                 	EOR @3, @2
                                 	;                  7654321
                                 	;          @2 = 0b00110100
                                 	;          @3 = 0b00110100 <- @3[0] = 0 ^ @0[1] = @0[1]
                                 	LSR @2
                                 	LSR @2
                                 	;                    76543
                                 	;          @2 = 0b00001101
                                 	;          @3 = 0b00110100 <- @3[0] = @0[1]
                                 	EOR @3, @2
                                 	;                    76543
                                 	;          @2 = 0b00001101
                                 	;          @3 = 0b00111001 <- @3[0] = @0[1] ^ @0[3]
                                 	LSR @2
                                 	LSR @2
                                 	;                      765
                                 	;          @2 = 0b00000011
                                 	;          @3 = 0b00111001 <- @3[0] = @0[1] ^ @0[3]
                                 	EOR @3, @2
                                 	;                      765
                                 	;          @2 = 0b00000011
                                 	;          @3 = 0b00111010 <- @3[0] = @0[1] ^ @0[3] ^ @0[5]
                                 	LSR @2
                                 	LSR @2
                                 	;                        7
                                 	;          @2 = 0b00000000
                                 	;          @3 = 0b00111010 <- @3[0] = @0[1] ^ @0[3] ^ @0[5]
                                 	EOR @3, @2
                                 	;          @2 = 0b00000000
                                 	;          @3 = 0b00111010 <- @3[0] = @0[1] ^ @0[3] ^ @0[5] ^ @0[7]
                                 	ORI @3, 0b11111110
                                 	; If XOR of bytes 1, 3, 5 and 7 is 1, move @4 one place to the left
                                 	CPI @3, 0xFF
                                 	BRNE xor_p1_end
                                 		LSL @4
                                 	xor_p1_end:
                                 	
                                 	; Make XOR of bytes 2, 3, 6 and 7
                                 	MOV @2, @0
                                 	CLR @3
                                 	LSR @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	LSR @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	ORI @3, 0b11111110
                                 	; If XOR of bytes 2, 3, 6 and 7 is 1, move @4 two places to the left
                                 	CPI @3, 0xFF
                                 	BRNE xor_p2_end
                                 		LSL @4
                                 		LSL @4
                                 	xor_p2_end:
                                 
                                 	; Make XOR of bytes 4, 5, 6 and 7
                                 	MOV @2, @0
                                 	CLR @3
                                 	LSR @2
                                 	LSR @2
                                 	LSR @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	ORI @3, 0b11111110
                                 	; If XOR of bytes 4, 5, 6 and 7 is 1, move @4 four places to the left
                                 	CPI @3, 0xFF
                                 	BRNE xor_p4_end
                                 		LSL @4
                                 		LSL @4
                                 		LSL @4
                                 		LSL @4
                                 	xor_p4_end:
                                 
                                 	; Apply correction (if there were no errors, it's applied on bit 0, which doesn't count in hamming bytes)
                                 	MOV @2, @0
                                 	EOR @2, @4
                                 
                                 	; Translate bits D7, D6, D5 and D3 into resulting nibble
                                 
                                 	MOV @4, @2
                                 	ORI @4, 0b11110111
                                 	CPI @4, 0xFF
                                 	BRNE PC+2
                                 		ORI @1, 1
                                 
                                 	MOV @4, @2
                                 	ORI @4, 0b11011111
                                 	CPI @4, 0xFF
                                 	BRNE PC+2
                                 		ORI @1, 2
                                 
                                 	MOV @4, @2
                                 	ORI @4, 0b10111111
                                 	CPI @4, 0xFF
                                 	BRNE PC+2
                                 		ORI @1, 4
                                 
                                 	MOV @4, @2
                                 	ORI @4, 0b01111111
                                 	CPI @4, 0xFF
                                 	BRNE PC+2
                                 		ORI @1, 8
                                 
                                 	POP @4
                                 	POP @3
                                 	POP @2
                                 	POP @0
                                 .ENDMACRO
                                 
                                 ; Converts a byte into a pair of nibbles
                                 ; BYTETONIBBLE <input> <output_high> <output_low>
                                 .MACRO BYTETONIBBLE
                                 	MOV @1, @0
                                 	LSR @1
                                 	LSR @1
                                 	LSR @1
                                 	LSR @1
                                 
                                 	MOV @2, @0
                                 	ANDI @2, 0b00001111
                                 .ENDMACRO
                                 
                                 ; Converts a pair of nibbles into a byte
                                 ; NIBBLETOBYTE <input_high> <input_low> <output>
                                 .MACRO NIBBLETOBYTE
                                 	MOV @2, @0
                                 	LSL @2
                                 	LSL @2
                                 	LSL @2
                                 	LSL @2
                                 	OR @2, @1
                                 .ENDMACRO
                                 
                                 ; Converts a byte into a pair of hamming bytes
                                 ; BYTETOHAMMING <input> <output_high> <output_low> <reg1>
                                 .MACRO BYTETOHAMMING
                                 	BYTETONIBBLE @0, @2, @3
                                 	NIBBLETOHAMMING @2, @1, @0, @3
                                 	NIBBLETOHAMMING @3, @2, @1, @0
                                 .ENDMACRO
                                 
                                 ; Converts a pair of hamming bytes into a byte, correcting them in the process
                                 ; HAMMINGTOBYTE <input_high> <input_low> <output> <reg1> <reg2>
                                 .MACRO HAMMINGTOBYTE
                                 	PUSH @0
                                 	PUSH @1
                                 	PUSH @3
                                 	PUSH @4
                                 
                                 	HAMMINGTONIBBLE @0, @3, @2, @1, @4
                                 	HAMMINGTONIBBLE @1, @4, @2, @0, @3
                                 	NIBBLETOBYTE @3, @4, @2
                                 
                                 	POP @4
                                 	POP @3
                                 	POP @1
                                 	POP @0
                                 
                                 #define BUFFER_SIZE 512
                                 
                                 .DSEG
                                 	; Stores the pseudorandom bytes
000100                           	data_buffer: .BYTE BUFFER_SIZE + 3
                                 
                                 	; Stores the hamming bytes before turning them into bytes
000303                           	hamming_buffer: .BYTE (BUFFER_SIZE + 3) * 2
                                 
                                 	; This memory space acts as an intermediate between the shield and other parts of the program which modify what the shield displays
000709                           	shield_buffer: .BYTE 4
                                 
                                 	; A L.U.T. to translate a nibble into its correspondent digit to display on shield
00070d                           	shield_digits: .BYTE 16
                                 
                                 	; A L.U.T. used only by the shield interruption
00071d                           	digits_buffer: .BYTE 4
                                 .CSEG
                                 start:
                                 	; Reboot the receiver, just in case
000039 e000                      	LDI r16, 0b00000000
00003a 9300 00c1                 	STS UCSR0B, r16
                                 
                                 	; Prepare PD0 (USART input pin) for receiving data
00003c e000                      	LDI r16, 0b00000000
00003d b90a                      	OUT DDRD, r16
                                 
                                 	; Set shield digits
00003e e0f7
00003f e0ed                      	SETZ shield_digits
000040 e003
000041 9301                      	STZ 0b00000011 ; 0
000042 e90f
000043 9301                      	STZ 0b10011111 ; 1
000044 e205
000045 9301                      	STZ 0b00100101 ; 2
000046 e00d
000047 9301                      	STZ 0b00001101 ; 3
000048 e909
000049 9301                      	STZ 0b10011001 ; 4
00004a e409
00004b 9301                      	STZ 0b01001001 ; 5
00004c e401
00004d 9301                      	STZ 0b01000001 ; 6
00004e e10f
00004f 9301                      	STZ 0b00011111 ; 7
000050 e001
000051 9301                      	STZ 0b00000001 ; 8
000052 e009
000053 9301                      	STZ 0b00001001 ; 9
000054 e101
000055 9301                      	STZ 0b00010001 ; A
000056 ec01
000057 9301                      	STZ 0b11000001 ; B
000058 e603
000059 9301                      	STZ 0b01100011 ; C
00005a e805
00005b 9301                      	STZ 0b10000101 ; D
00005c e601
00005d 9301                      	STZ 0b01100001 ; E
00005e e701
00005f 9301                      	STZ 0b01110001 ; F
                                 
                                 	; Initialize shield with all leds turned off
000060 e0f7
000061 e0e9                      	SETZ shield_buffer
000062 ef0f
000063 9301                      	STZ -1
000064 ef0f
000065 9301                      	STZ -1
000066 ef0f
000067 9301                      	STZ -1
000068 ef0f
000069 9301                      	STZ -1
                                 
                                 	; Set digits buffer
00006a e0f7
00006b e1ed                      	SETZ digits_buffer
00006c e808
00006d 9301                      	STZ 0b10001000
00006e e404
00006f 9301                      	STZ 0b01000100
000070 e202
000071 9301                      	STZ 0b00100010
000072 e101
000073 9301                      	STZ 0b00010001
                                 	
000074 e0f7
000075 e2e1                      	SETZ usartR_counter
000076 e000
000077 9301                      	STZ 0
000078 e000
000079 9301                      	STZ 0
                                 
                                 
                                 	; Timer 0 handles the operation of reading the shield buffer and displaying the contents on the shield
00007a e002
00007b bd04
00007c e005
00007d bd05
00007e e302
00007f bd07
000080 e002
000081 9300 006e                 	TIMER0SETUP 50
000083 930f
000084 b104
000085 6001
000086 b904
000087 b105
000088 6001
000089 b905
00008a b10a
00008b 6900
00008c b90a
00008d b10b
00008e 760f
00008f b90b
000090 910f                      	SHIELDSETUP
                                 
                                 	; Set up the USART mechanism, the USART RX Complete Interrupt handles the main program
000091 e400                      	LDI r16, 0b01000000
000092 9300 00c0                 	STS UCSR0A, r16
                                 
000094 e900                      	LDI r16, 0b10010000
000095 9300 00c1                 	STS UCSR0B, r16
                                 
000097 e00e                      	LDI r16, 0b00001110
000098 9300 00c2                 	STS UCSR0C, r16
00009a e00f                      	LDI r16, 0b00001111
00009b 9300 00c5                 	STS UBRR0H, r16
00009d ef0f                      	LDI r16, 0b11111111
00009e 9300 00c4                 	STS UBRR0L, r16
                                 
0000a0 9478                      sei
                                 program:
0000a1 cfff                      	rJMP program
                                 
                                 
                                 // USART read complete interruption
                                 .DSEG
000721                           	usartR_counter: .BYTE 2
                                 .CSEG
                                 usartR_start:
0000a2 920f                      	PUSH r0
0000a3 b60f                      	IN r0, SREG
0000a4 920f                      	PUSH r0
0000a5 930f                      	PUSH r16
0000a6 931f                      	PUSH r17
0000a7 932f                      	PUSH r18
0000a8 933f                      	PUSH r19
0000a9 934f                      	PUSH r20
0000aa 935f                      	PUSH r21
                                 
                                 	// If the counter's high byte is 0xFF, return
0000ab 9110 0721                 	LDS r17, usartR_counter + 0
0000ad 3f1f                      	CPI r17, 0xFF
0000ae f411                      	BRNE usartR_continue
0000af 940c 00d1                 		JMP usartR_end
                                 	usartR_continue:
                                 
                                 	// Read byte from USART and clear bit 0
0000b1 9110 00c6                 	LDS r17, UDR0
0000b3 7f1e                      	ANDI r17, 0b11111110
                                 
                                 	// Store byte in hamming_buffer
0000b4 9120 0721                 	LDS r18, usartR_counter + 0
0000b6 9130 0722                 	LDS r19, usartR_counter + 1
0000b8 e0f3
0000b9 e0e3                      	SETZ hamming_buffer
0000ba 0ff2
0000bb 0fe3
0000bc f408
0000bd 95f3                      	SUMZW r18, r19
0000be 8310                      	ST Z, r17
                                 
                                 	// Increase counter
0000bf 9533
0000c0 f409
0000c1 9523                      	INCW r18, r19
0000c2 9320 0721                 	STS usartR_counter + 0, r18
0000c4 9330 0722                 	STS usartR_counter + 1, r19
                                 
                                 	// If counter < BUFFER_SIZE * 2, return
0000c6 3024
0000c7 f409
0000c8 3036                      	CPWI r18, r19, (BUFFER_SIZE + 3) * 2
0000c9 f038                      	BRLO usartR_end
                                 
                                 	// Transform hamming bytes into normal bytes and display checksum
0000ca 940e 00db                 	CALL process_received_data
0000cc ef2f                      	LDI r18, -1
0000cd 9320 0721                 	STS usartR_counter + 0, r18
0000cf 9320 0722                 	STS usartR_counter + 1, r18
                                 	
                                 usartR_end:
0000d1 915f                      	POP r21
0000d2 914f                      	POP r20
0000d3 913f                      	POP r19
0000d4 912f                      	POP r18
0000d5 911f                      	POP r17
0000d6 910f                      	POP r16
0000d7 900f                      	POP r0
0000d8 be0f                      	OUT SREG, r0
0000d9 900f                      	POP r0
0000da 9518                      	RETI
                                 
                                 // void process_received_data();
                                 process_received_data:
0000db 930f                      	PUSH r16
0000dc 931f                      	PUSH r17
0000dd 932f                      	PUSH r18
0000de 933f                      	PUSH r19
0000df 934f                      	PUSH r20
0000e0 935f                      	PUSH r21
                                 
0000e1 2711                      	CLR r17
0000e2 2722                      	CLR r18
                                 
0000e3 ef3f                      	LDI r19, -1
                                 
                                 	processreceiveddata_loop1_start:
0000e4 3f3f                      	CPI r19, -1
0000e5 f461                      	BRNE processreceiveddata_loop1_store_byte
0000e6 e0f3
0000e7 e0e3                      		SETZ hamming_buffer
0000e8 0ff1
0000e9 0fe2
0000ea f408
0000eb 95f3                      		SUMZW r17, r18
0000ec 0ff1
0000ed 0fe2
0000ee f408
0000ef 95f3                      		SUMZW r17, r18
0000f0 8130                      		LD r19, Z
0000f1 c0d7                      		RJMP processreceiveddata_loop1_guard
                                 
                                 	processreceiveddata_loop1_store_byte:
0000f2 e0f3
0000f3 e0e3                      		SETZ hamming_buffer
0000f4 0ff1
0000f5 0fe2
0000f6 f408
0000f7 95f3                      		SUMZW r17, r18
0000f8 0ff1
0000f9 0fe2
0000fa f408
0000fb 95f3                      		SUMZW r17, r18
0000fc 95e3
0000fd f409
0000fe 95f3                      		INCW ZH, ZL
0000ff 8140                      		LD r20, Z
                                 
000100 933f
000101 934f
000102 936f
000103 937f
000104 933f
000105 935f
000106 934f
000107 937f
000108 2777
000109 9573
00010a 2766
00010b 2f53
00010c 2744
00010d 9556
00010e 2745
00010f 9556
000110 9556
000111 2745
000112 9556
000113 9556
000114 2745
000115 9556
000116 9556
000117 2745
000118 6f4e
000119 3f4f
00011a f409
00011b 0f77
00011c 2f53
00011d 2744
00011e 9556
00011f 9556
000120 2745
000121 9556
000122 2745
000123 9556
000124 9556
000125 9556
000126 2745
000127 9556
000128 2745
000129 6f4e
00012a 3f4f
00012b f411
00012c 0f77
00012d 0f77
00012e 2f53
00012f 2744
000130 9556
000131 9556
000132 9556
000133 9556
000134 2745
000135 9556
000136 2745
000137 9556
000138 2745
000139 9556
00013a 2745
00013b 6f4e
00013c 3f4f
00013d f421
00013e 0f77
00013f 0f77
000140 0f77
000141 0f77
000142 2f53
000143 2757
000144 2f75
000145 6f77
000146 3f7f
000147 f409
000148 6061
000149 2f75
00014a 6d7f
00014b 3f7f
00014c f409
00014d 6062
00014e 2f75
00014f 6b7f
000150 3f7f
000151 f409
000152 6064
000153 2f75
000154 677f
000155 3f7f
000156 f409
000157 6068
000158 917f
000159 914f
00015a 915f
00015b 913f
00015c 934f
00015d 935f
00015e 933f
00015f 936f
000160 2766
000161 9563
000162 2777
000163 2f54
000164 2733
000165 9556
000166 2735
000167 9556
000168 9556
000169 2735
00016a 9556
00016b 9556
00016c 2735
00016d 9556
00016e 9556
00016f 2735
000170 6f3e
000171 3f3f
000172 f409
000173 0f66
000174 2f54
000175 2733
000176 9556
000177 9556
000178 2735
000179 9556
00017a 2735
00017b 9556
00017c 9556
00017d 9556
00017e 2735
00017f 9556
000180 2735
000181 6f3e
000182 3f3f
000183 f411
000184 0f66
000185 0f66
000186 2f54
000187 2733
000188 9556
000189 9556
00018a 9556
00018b 9556
00018c 2735
00018d 9556
00018e 2735
00018f 9556
000190 2735
000191 9556
000192 2735
000193 6f3e
000194 3f3f
000195 f421
000196 0f66
000197 0f66
000198 0f66
000199 0f66
00019a 2f54
00019b 2756
00019c 2f65
00019d 6f67
00019e 3f6f
00019f f409
0001a0 6071
0001a1 2f65
0001a2 6d6f
0001a3 3f6f
0001a4 f409
0001a5 6072
0001a6 2f65
0001a7 6b6f
0001a8 3f6f
0001a9 f409
0001aa 6074
0001ab 2f65
0001ac 676f
0001ad 3f6f
0001ae f409
0001af 6078
0001b0 916f
0001b1 913f
0001b2 915f
0001b3 914f
0001b4 2f56
0001b5 0f55
0001b6 0f55
0001b7 0f55
0001b8 0f55
0001b9 2b57
0001ba 917f
0001bb 916f
0001bc 914f
0001bd 913f                      		HAMMINGTOBYTE r19, r20, r21, r22, r23
0001be e0f1
0001bf e0e0                      		SETZ data_buffer
0001c0 0ff1
0001c1 0fe2
0001c2 f408
0001c3 95f3                      		SUMZW r17, r18
0001c4 8350                      		ST Z, r21
                                 
0001c5 ef3f                      		LDI r19, -1
0001c6 9523
0001c7 f409
0001c8 9513                      		INCW r17, r18
                                 
                                 	processreceiveddata_loop1_guard:
0001c9 3012
0001ca f409
0001cb 3023                      		CPWI r17, r18, BUFFER_SIZE + 3
0001cc f410                      		BRSH processreceiveddata_loop1_end
0001cd 940c 00e4                 		JMP processreceiveddata_loop1_start
                                 	processreceiveddata_loop1_end:
                                 
0001cf 934f                      		PUSH r20
0001d0 935f                      		PUSH r21
0001d1 936f                      		PUSH r22
0001d2 937f                      		PUSH r23
0001d3 938f                      		PUSH r24
0001d4 939f                      		PUSH r25
                                 
0001d5 930f                      		PUSH r16
0001d6 931f                      		PUSH r17
0001d7 932f                      		PUSH r18
0001d8 940e 0207                 		CALL get_checksum
0001da 2f70                      		MOV r23, r16
0001db 2f81                      		MOV r24, r17
0001dc 2f92                      		MOV r25, r18
                                 
0001dd 912f                      		POP r18
0001de 911f                      		POP r17
0001df 910f                      		POP r16
                                 
0001e0 9140 0300                 		LDS r20, data_buffer + BUFFER_SIZE + 0
0001e2 9150 0301                 		LDS r21, data_buffer + BUFFER_SIZE + 1
0001e4 9160 0302                 		LDS r22, data_buffer + BUFFER_SIZE + 2
                                 
0001e6 1747                      		CP r20, r23
0001e7 f469                      		BRNE usartR_display_err
0001e8 1758                      		CP r21, r24
0001e9 f459                      		BRNE usartR_display_err
0001ea 1769                      		CP r22, r25
0001eb f449                      		BRNE usartR_display_err
0001ec 930f                      			PUSH r16
0001ed 931f                      			PUSH r17
0001ee 2f05                      			MOV r16, r21
0001ef 2f16                      			MOV r17, r22
0001f0 940e 0238                 			CALL store_on_shield_buffer
0001f2 911f                      			POP r17
0001f3 910f                      			POP r16
0001f4 c002                      			RJMP usartR_display_end
                                 
                                 		usartR_display_err:
0001f5 940e 022b                 		CALL display_err
                                 
                                 		usartR_display_end:
                                 		
0001f7 919f                      		POP r25
0001f8 918f                      		POP r24
0001f9 917f                      		POP r23
0001fa 916f                      		POP r22
0001fb 915f                      		POP r21
0001fc 914f                      		POP r20
                                 
                                 		; Deactivate USART Receiver and Receive Complete Interrupt
0001fd e000                      		LDI r16, 0
0001fe 9300 00c1                 		STS UCSR0B, r16
                                 
000200 915f                      	POP r21
000201 914f                      	POP r20
000202 913f                      	POP r19
000203 912f                      	POP r18
000204 911f                      	POP r17
000205 910f                      	POP r16
000206 9508                      	RET
                                 
                                 // ushort get_checksum();
                                 get_checksum:
000207 933f                      	PUSH r19
000208 934f                      	PUSH r20
000209 935f                      	PUSH r21
00020a 936f                      	PUSH r22
                                 
                                 	; Initialize counter
00020b 2711                      	CLR r17
00020c 2722                      	CLR r18
                                 
                                 	; Initialize checksum
00020d 2733                      	CLR r19
00020e 2744                      	CLR r20
00020f 2755                      	CLR r21
                                 
                                 	getchecksum_start:
000210 e0f1
000211 e0e0                      	SETZ data_buffer
000212 0ff1
000213 0fe2
000214 f408
000215 95f3                      	SUMZW r17, r18
000216 8160                      	LD r22, Z
                                 
000217 0f56
000218 f418
000219 9543
00021a f409
00021b 9533                      	ADD3B1 r19, r20, r21, r22
                                 		
00021c 9523
00021d f409
00021e 9513                      	INCW r17, r18
                                 
00021f 3012
000220 f409
000221 3020                      	CPWI r17, r18, BUFFER_SIZE
000222 f368                      	BRLO getchecksum_start
                                 
000223 2f03                      	MOV r16, r19
000224 2f14                      	MOV r17, r20
000225 2f25                      	MOV r18, r21
                                 
000226 916f                      	POP r22
000227 915f                      	POP r21
000228 914f                      	POP r20
000229 913f                      	POP r19
00022a 9508                      	RET
                                 
                                 display_err:
00022b 930f                      	PUSH r16
                                 
00022c e0f7
00022d e0e9                      	SETZ shield_buffer
00022e e601
00022f 9301                      	STZ 0b01100001
000230 ef05
000231 9301                      	STZ 0b11110101
000232 ef05
000233 9301                      	STZ 0b11110101
000234 ef0f
000235 9301                      	STZ 0b11111111
                                 
000236 910f                      	POP r16
000237 9508                      	RET
                                 
                                 // void store_on_shield_buffer(short n);
                                 store_on_shield_buffer:
000238 930f                      	PUSH r16
000239 931f                      	PUSH r17
00023a 932f                      	PUSH r18
00023b 933f                      	PUSH r19
                                 
00023c 2f20                      	MOV r18, r16
00023d 9526                      	LSR r18
00023e 9526                      	LSR r18
00023f 9526                      	LSR r18
000240 9526                      	LSR r18
000241 e0f7
000242 e0ed
000243 0fe2
000244 f408
000245 95f3
000246 8130                      	LOADBYTEFROMSLICE r19, shield_digits, r18
000247 9330 0709                 	STS shield_buffer + 0, r19
                                 
000249 2f20                      	MOV r18, r16
00024a 702f                      	ANDI r18, 0b00001111
00024b e0f7
00024c e0ed
00024d 0fe2
00024e f408
00024f 95f3
000250 8130                      	LOADBYTEFROMSLICE r19, shield_digits, r18
000251 9330 070a                 	STS shield_buffer + 1, r19
                                 
000253 2f21                      	MOV r18, r17
000254 9526                      	LSR r18
000255 9526                      	LSR r18
000256 9526                      	LSR r18
000257 9526                      	LSR r18
000258 e0f7
000259 e0ed
00025a 0fe2
00025b f408
00025c 95f3
00025d 8130                      	LOADBYTEFROMSLICE r19, shield_digits, r18
00025e 9330 070b                 	STS shield_buffer + 2, r19
                                 
000260 2f21                      	MOV r18, r17
000261 702f                      	ANDI r18, 0b00001111
000262 e0f7
000263 e0ed
000264 0fe2
000265 f408
000266 95f3
000267 8130                      	LOADBYTEFROMSLICE r19, shield_digits, r18
000268 9330 070c                 	STS shield_buffer + 3, r19
                                 
00026a 913f                      	POP r19
00026b 912f                      	POP r18
00026c 911f                      	POP r17
00026d 910f                      	POP r16
00026e 9508                      	RET
                                 
                                 // timer 0 interruption
                                 tmr0_start:
00026f 920f                      	PUSH r0
000270 b60f                      	IN r0, SREG
000271 920f                      	PUSH r0
000272 930f                      	PUSH r16
                                 
000273 940e 027a                 	CALL display_shield
                                 
                                 tmr0_end:
000275 910f                      	POP r16
000276 900f                      	POP r0
000277 be0f                      	OUT SREG, r0
000278 900f                      	POP r0
000279 9518                      	RETI
                                 
                                 // void display_shield();
                                 .DSEG
000723                           	display_shield_digit: .BYTE 1
                                 .CSEG
                                 display_shield:
00027a 920f                      	PUSH r0
00027b b60f                      	IN r0, SREG
00027c 920f                      	PUSH r0
00027d 930f                      	PUSH r16
00027e 936f                      	PUSH r22
00027f 921f                      	PUSH r1
000280 922f                      	PUSH r2
000281 9160 0723                 	LDS r22, display_shield_digit
                                 
000283 e0f7
000284 e0e9                      	SETZ shield_buffer
000285 0fe6
000286 f408
000287 95f3                      	SUMZ r22
000288 8010                      	LD r1, Z
                                 
000289 e0f7
00028a e1ed                      	SETZ digits_buffer
00028b 0fe6
00028c f408
00028d 95f3                      	SUMZ r22
00028e 8020                      	LD r2, Z
                                 
00028f 940e 0026                 	CALL write_shield
                                 
000291 9563                      	INC r22
000292 3064                      	CPI r22, 4
000293 f051                      	BREQ display_shield_reset
                                 
                                 display_shield_end:
000294 9360 0723                 	STS display_shield_digit, r22
000296 902f                      	POP r2
000297 901f                      	POP r1
000298 916f                      	POP r22
000299 910f                      	POP r16
00029a 900f                      	POP r0
00029b be0f                      	OUT SREG, r0
00029c 900f                      	POP r0
00029d 9508                      	RET
                                 
                                 display_shield_reset:
00029e e060                      	LDI r22, 0
00029f cff4                      	RJMP display_shield_end


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :  41 r0 :  18 r1 :   5 r2 :   4 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 119 r17:  32 r18:  50 r19:  59 r20:  45 
r21: 109 r22:  50 r23:  36 r24:   4 r25:   4 r26:   0 r27:   0 r28:   0 
r29:   0 r30:  30 r31:  37 
Registers used: 16 out of 35 (45.7%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :  21 adiw  :   0 and   :   0 
andi  :   4 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :  14 brcs  :   1 break :   0 breq  :   1 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 brlt  :   0 brmi  :   0 
brne  :  28 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   8 cbi   :   3 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  17 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   3 cpc   :   0 
cpi   :  23 cpse  :   0 dec   :   1 eor   :  26 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   7 inc   :  26 jmp   :   5 
ld    :   9 ldd   :   0 ldi   :  79 lds   :   8 lpm   :   0 lsl   :  18 
lsr   :  51 mov   :  30 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   1 ori   :  25 out   :  11 pop   :  56 
push  :  56 rcall :   0 ret   :   7 reti  :   2 rjmp  :   5 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   3 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  32 std   :   0 sts   :  17 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 36 out of 113 (31.9%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000540   1280      0   1280   32768   3.9%
[.dseg] 0x000100 0x000724      0   1572   1572    2048  76.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
