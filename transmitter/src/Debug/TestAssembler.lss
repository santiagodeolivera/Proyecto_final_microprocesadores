
AVRASM ver. 2.2.8  C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\main.asm Thu Dec 02 15:41:14 2021

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\main.asm(10): Including file 'C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib.asm'
C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib.asm(1): Including file 'C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib/shield_lib.asm'
C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib.asm(2): Including file 'C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib/timer_lib.asm'
C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib.asm(3): Including file 'C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib/pointers_lib.asm'
C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib.asm(4): Including file 'C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib/math_lib.asm'
C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib.asm(5): Including file 'C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib/hamming_lib.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m328Pdef.inc'
C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\main.asm(10): Including file 'C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib.asm'
C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib.asm(1): Including file 'C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib/shield_lib.asm'
C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib.asm(2): Including file 'C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib/timer_lib.asm'
C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib.asm(3): Including file 'C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib/pointers_lib.asm'
C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib.asm(4): Including file 'C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib/math_lib.asm'
C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib.asm(5): Including file 'C:\Users\santi\Files\Estudios\ProgrammingProjects\Proyecto_final_microprocesadores\transmitter\src\lib/hamming_lib.asm'
                                 
                                 .ORG 0x0000
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
000000 940c 0031                 	JMP start
                                 .ORG 0x0008
000008 940c 00c9                 	JMP pcint1_start
                                 .ORG 0x0016
000016 940c 00d9                 	JMP tmr1_start
                                 .ORG 0x001C
00001c 940c 01f5                 	JMP tmr0_start
                                 
                                 .INCLUDE "lib.asm"
                                 
                                 
                                 	PUSH r16
                                 	IN		r16,    DDRB
                                 	ORI		r16,    0b00000001
                                 	OUT		DDRB,	r16			; SD (serial data)
                                 
                                 	IN		r16,    PORTB
                                 	ORI		r16,    0b00000001
                                 	OUT		PORTB,	r16
                                 
                                 	IN		r16,	DDRD
                                 	ORI		r16,	0b10010000
                                 	OUT		DDRD,	r16
                                 	IN		r16,	PORTD
                                 	ANDI	r16,	0b01101111  ; SCLK (bit 7, serial clock) and LCH (bit 4, latch clock)
                                 	OUT		PORTD,	r16
                                 	POP r16
                                 .ENDMACRO
                                 
                                 ; Writes a digit into a concrete digit slot of the shield
                                 ; Parameters:
                                 ;     r16: The digit to write
                                 ;     r17: The digit slot
                                 write_shield: 
00001e 940e 0026                 	CALL	write_bytes_into_PB0
000020 2c12                      	MOV		r1, r2
000021 940e 0026                 	CALL	write_bytes_into_PB0
000023 9a5c                      	SBI		PORTD, 4		; LCHCLK = 1
000024 985c                      	CBI		PORTD, 4		; LCHCLK = 0
000025 9508                      	RET
                                 
                                 write_bytes_into_PB0:
000026 e028                      	LDI		r18, 0x08
                                 	PB0_loop:
000027 985f                      		CBI		PORTD, 7		; SCLK = 0
000028 9416                      		LSR		r1
000029 f010                      		BRCS	PB0_set
00002a 9828                      		CBI		PORTB, 0		; SD = 0
00002b c001                      		RJMP	PB0_set_end
                                 	PB0_set:
00002c 9a28                      		SBI		PORTB, 0		; SD = 1
                                 	PB0_set_end:
00002d 9a5f                      		SBI		PORTD, 7		; SCLK = 1
00002e 952a                      		DEC		r18
00002f f7b9                      		BRNE	PB0_loop
000030 9508                      		RET
                                 
                                 .INCLUDE "lib/timer_lib.asm"
                                 
                                 .MACRO TIMER0SETUP
                                 	LDI r16, 0b00000010   ; Timer mode
                                 	OUT TCCR0A, r16
                                 	LDI r16, 0b00000101   ; Clock period
                                 	OUT TCCR0B, r16
                                 	LDI r16, @0           ; Timer limit
                                 	OUT OCR0A, r16
                                 	LDI r16, 0b00000010   ; Timer mask
                                 	STS TIMSK0, r16		
                                 .ENDMACRO
                                 
                                 ; TIMER1SETUP <timer_limit>
                                 .MACRO TIMER1SETUP
                                 	PUSH r16
                                 
                                 	LDI r16, 0b00000000   ; Timer mode
                                 	STS TCCR1A, r16
                                 
                                 	LDI r16, 0b00001101   ; Clock period
                                 	STS TCCR1B, r16
                                 
                                 	LDI r16, high(@0)     ; Timer limit (high byte)
                                 	STS OCR1AH, r16
                                 
                                 	LDI r16, low(@0)      ; Timer limit (low byte)
                                 	STS OCR1AL, r16
                                 
                                 	LDS r16, TIMSK1
                                 	ORI r16, 0b00000010   ; Timer mask
                                 	STS TIMSK1, r16
                                 
                                 	POP r16
                                 .ENDMACRO
                                 .INCLUDE "lib/pointers_lib.asm"
                                 
                                 ; STZ <value_to_store>
                                 .MACRO STZ
                                 	LDI r16, @0
                                 	ST Z+, r16
                                 .ENDMACRO
                                 
                                 ; Set the Z pointer
                                 ; SETZ <pointer_location>
                                 .MACRO SETZ
                                 	LDI ZH, high(@0)
                                 	LDI ZL, low(@0)
                                 .ENDMACRO
                                 
                                 .MACRO SUMZ
                                 	ADD ZL, @0
                                 	BRCC PC+2
                                 		INC ZH
                                 .ENDMACRO
                                 
                                 ; Adds the content of a word register to the Z pointer
                                 ; SUMZW <high_register> <low_register>
                                 .MACRO SUMZW
                                 	ADD ZH, @0
                                 	SUMZ @1
                                 .ENDMACRO
                                 
                                 ; LOADBYTEFROMSLICE <output> <input_pointer> <input_index>
                                 .MACRO LOADBYTEFROMSLICE
                                 	SETZ @1
                                 	SUMZ @2
                                 	LD @0, Z
                                 .ENDMACRO
                                 .INCLUDE "lib/math_lib.asm"
                                 
                                 	CLR @2
                                 	byte_to_digits_start:
                                 		CPI @0, @1
                                 		BRLO byte_to_digits_end
                                 		SUBI @0, @1
                                 		INC @2
                                 		RJMP byte_to_digits_start
                                 	byte_to_digits_end:
                                 .ENDMACRO
                                 
                                 ; WORDINTEGERDIVISION <dividend's high register> <dividend's low register> <literal quotient divider> <quotient's high register> <quotient's low register>
                                 .MACRO WORDINTEGERDIVISION
                                 	CLR @4
                                 	CLR @3
                                 	short_to_digits_start:
                                 		CPI @0, high(@2)
                                 			BRLO short_to_digits_end
                                 			BRNE short_to_digits_add
                                 		CPI @1, low(@2)
                                 			BRLO short_to_digits_end
                                 	short_to_digits_add:
                                 		SUBI @1, low(@2)
                                 		BRPL PC+2
                                 			DEC @0
                                 		SUBI @0, high(@2)
                                 		INC @4
                                 		BRNE PC+2
                                 			INC @3
                                 		RJMP short_to_digits_start
                                 	short_to_digits_end:
                                 .ENDMACRO
                                 
                                 ; DECW <high_register> <low_register>
                                 .MACRO DECW
                                 	DEC @1
                                 	CPI @1, 0xFF
                                 	BRNE PC+2
                                 		DEC @0
                                 .ENDMACRO
                                 
                                 ; INCW <high_register> <low_register>
                                 .MACRO INCW
                                 	INC @1
                                 	BRNE PC+2
                                 		INC @0
                                 .ENDMACRO
                                 
                                 ; CPWI <high_register> <low_register> <literal>
                                 .MACRO CPWI
                                 	CPI @0, high(@2)
                                 	BRNE cpwi_end
                                 		CPI @1, low(@2)
                                 	cpwi_end:
                                 .ENDMACRO
                                 
                                 ; ADDW1 <high_register_result> <low_register_result> <register>
                                 .MACRO ADDW1
                                 	ADD @1, @2
                                 	BRCC PC+2
                                 		INC @0
                                 .ENDMACRO
                                 
                                 ; ADDW2 <high_register_result> <low_register_result> <register_high> <register_low>
                                 .MACRO ADDW2
                                 	ADD @0, @2
                                 	ADDW1 @0, @1, @3
                                 .INCLUDE "lib/hamming_lib.asm"
                                 
                                 .MACRO NIBBLETOHAMMING
                                 	PUSH @2
                                 	PUSH @3
                                 
                                 	CLR @2
                                 	CLR @1
                                 
                                 	MOV @2, @0
                                 	ORI @2, 0b11111110
                                 	CPI @2, 0xFF
                                 	BRNE nibble_to_hamming_d3_end
                                 		LDI @3, 0b00001110
                                 		EOR @1, @3
                                 	nibble_to_hamming_d3_end:
                                 
                                 	MOV @2, @0
                                 	ORI @2, 0b11111101
                                 	CPI @2, 0xFF
                                 	BRNE nibble_to_hamming_d5_end
                                 		LDI @3, 0b00110010
                                 		EOR @1, @3
                                 	nibble_to_hamming_d5_end:
                                 
                                 	MOV @2, @0
                                 	ORI @2, 0b11111011
                                 	CPI @2, 0xFF
                                 	BRNE nibble_to_hamming_d6_end
                                 		LDI @3, 0b01010100
                                 		EOR @1, @3
                                 	nibble_to_hamming_d6_end:
                                 
                                 	MOV @2, @0
                                 	ORI @2, 0b11110111
                                 	CPI @2, 0xFF
                                 	BRNE nibble_to_hamming_d7_end
                                 		LDI @3, 0b10010110
                                 		EOR @1, @3
                                 	nibble_to_hamming_d7_end:
                                 
                                 	POP @3
                                 	POP @2
                                 .ENDMACRO
                                 
                                 ; @0: input
                                 ; @1: output
                                 ; HAMMINGTONIBBLE <input> <output> <reg1> <reg2> <reg3>
                                 .MACRO HAMMINGTONIBBLE
                                 	PUSH @2
                                 	PUSH @3
                                 	PUSH @4
                                 
                                 	CLR @4
                                 	INC @4
                                 	CLR @1
                                 
                                 	MOV @2, @0
                                 	; Make XOR of bytes 1, 3, 5 and 7
                                 	CLR @3
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	ORI @3, 0b11111110
                                 	CPI @3, 0xFF
                                 	BRNE xor_p1_end
                                 		LSL @4
                                 	xor_p1_end:
                                 	
                                 	MOV @2, @0
                                 	; Make XOR of bytes 2, 3, 6 and 7
                                 	CLR @3
                                 	LSR @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	LSR @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	ORI @3, 0b11111110
                                 	CPI @3, 0xFF
                                 	BRNE xor_p2_end
                                 		LSL @4
                                 		LSL @4
                                 	xor_p2_end:
                                 
                                 	MOV @2, @0
                                 	; Make XOR of bytes 4, 5, 6 and 7
                                 	CLR @3
                                 	LSR @2
                                 	LSR @2
                                 	LSR @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	LSR @2
                                 	EOR @3, @2
                                 	ORI @3, 0b11111110
                                 	CPI @3, 0xFF
                                 	BRNE xor_p4_end
                                 		LSL @4
                                 		LSL @4
                                 		LSL @4
                                 		LSL @4
                                 	xor_p4_end:
                                 
                                 	MOV @2, @0
                                 	EOR @2, @4
                                 
                                 	MOV @4, @2
                                 	ORI @4, 0b11110111
                                 	CPI @4, 0xFF
                                 	BRNE PC+2
                                 		ORI @1, 1
                                 
                                 	MOV @4, @2
                                 	ORI @4, 0b11011111
                                 	CPI @4, 0xFF
                                 	BRNE PC+2
                                 		ORI @1, 2
                                 
                                 	MOV @4, @2
                                 	ORI @4, 0b10111111
                                 	CPI @4, 0xFF
                                 	BRNE PC+2
                                 		ORI @1, 4
                                 
                                 	MOV @4, @2
                                 	ORI @4, 0b01111111
                                 	CPI @4, 0xFF
                                 	BRNE PC+2
                                 		ORI @1, 8
                                 
                                 	POP @4
                                 	POP @3
                                 	POP @2
                                 .ENDMACRO
                                 
                                 
                                 ; BYTETONIBBLE <input> <output_high> <output_low>
                                 .MACRO BYTETONIBBLE
                                 	MOV @1, @0
                                 	LSR @1
                                 	LSR @1
                                 	LSR @1
                                 	LSR @1
                                 
                                 	MOV @2, @0
                                 	ANDI @2, 0b00001111
                                 .ENDMACRO
                                 
                                 ; NIBBLETOBYTE <input_high> <input_low> <output>
                                 .MACRO NIBBLETOBYTE
                                 	MOV @2, @0
                                 	LSL @2
                                 	LSL @2
                                 	LSL @2
                                 	LSL @2
                                 	OR @2, @1
                                 .ENDMACRO
                                 
                                 ; BYTETOHAMMING <input> <output_high> <output_low> <reg1>
                                 .MACRO BYTETOHAMMING
                                 	BYTETONIBBLE @0, @2, @3
                                 	NIBBLETOHAMMING @2, @1, @0, @3
                                 	NIBBLETOHAMMING @3, @2, @1, @0
                                 
                                 #define BUFFER_SIZE 512
                                 
                                 .DSEG
000100                           	data_buffer: .BYTE BUFFER_SIZE
                                 
000300                           	shield_buffer: .BYTE 4
000304                           	shield_digits: .BYTE 16
000314                           	digits_buffer: .BYTE 4
                                 .CSEG
                                 start:
000031 e002                      	LDI r16, 0b00000010
000032 b90a                      	OUT DDRD, r16
000033 b90b                      	OUT PORTD, r16
000034 e000                      	LDI r16, 0b00000000
000035 b907                      	OUT DDRC, r16
000036 ef0f                      	LDI r16, 0b11111111
000037 b908                      	OUT PORTC, r16
000038 ef0f                      	LDI r16, 0b11111111
000039 b904                      	OUT DDRB, r16
00003a b905                      	OUT PORTB, r16
                                 
00003b e0f3
00003c e0e4                      	SETZ shield_digits
00003d e003
00003e 9301                      	STZ 0b00000011 ; 0
00003f e90f
000040 9301                      	STZ 0b10011111 ; 1
000041 e205
000042 9301                      	STZ 0b00100101 ; 2
000043 e00d
000044 9301                      	STZ 0b00001101 ; 3
000045 e909
000046 9301                      	STZ 0b10011001 ; 4
000047 e409
000048 9301                      	STZ 0b01001001 ; 5
000049 e401
00004a 9301                      	STZ 0b01000001 ; 6
00004b e10f
00004c 9301                      	STZ 0b00011111 ; 7
00004d e001
00004e 9301                      	STZ 0b00000001 ; 8
00004f e009
000050 9301                      	STZ 0b00001001 ; 9
000051 e101
000052 9301                      	STZ 0b00010001 ; A
000053 ec01
000054 9301                      	STZ 0b11000001 ; B
000055 e603
000056 9301                      	STZ 0b01100011 ; C
000057 e805
000058 9301                      	STZ 0b10000101 ; D
000059 e601
00005a 9301                      	STZ 0b01100001 ; E
00005b e701
00005c 9301                      	STZ 0b01110001 ; F
                                 
00005d e0f3
00005e e0e0                      	SETZ shield_buffer
00005f ef0f
000060 9301                      	STZ -1
000061 ef0f
000062 9301                      	STZ -1
000063 ef0f
000064 9301                      	STZ -1
000065 ef0f
000066 9301                      	STZ -1
                                 
000067 e0f3
000068 e1e4                      	SETZ digits_buffer
000069 e808
00006a 9301                      	STZ 0b10001000
00006b e404
00006c 9301                      	STZ 0b01000100
00006d e202
00006e 9301                      	STZ 0b00100010
00006f e101
000070 9301                      	STZ 0b00010001
                                 	
000071 e0f3
000072 e1eb                      	SETZ tmr1_hamming_buffer
000073 ef0f
000074 9301                      	STZ 0b11111111
                                 
000075 e0f3
000076 e1e8                      	SETZ tmr1_state
000077 ef0f
000078 9301                      	STZ -1
                                 
000079 e0f3
00007a e1e9                      	SETZ tmr1_counter
00007b e000
00007c 9301                      	STZ 0
00007d e000
00007e 9301                      	STZ 0
                                 
00007f e0f3
000080 e1ec                      	SETZ tmr1_checksum
000081 e000
000082 9301                      	STZ 0
000083 e000
000084 9301                      	STZ 0
                                 
000085 e0f3
000086 e1ef                      	SETZ pseudorand_mem
000087 ef0f
000088 9301                      	STZ -1
                                 
000089 e002
00008a bd04
00008b e005
00008c bd05
00008d e302
00008e bd07
00008f e002
000090 9300 006e                 	TIMER0SETUP 50
000092 930f
000093 e000
000094 9300 0080
000096 e00d
000097 9300 0081
000099 e000
00009a 9300 0089
00009c e104
00009d 9300 0088
00009f 9100 006f
0000a1 6002
0000a2 9300 006f
0000a4 910f                      	TIMER1SETUP 20
0000a5 930f
0000a6 b104
0000a7 6001
0000a8 b904
0000a9 b105
0000aa 6001
0000ab b905
0000ac b10a
0000ad 6900
0000ae b90a
0000af b10b
0000b0 760f
0000b1 b90b
0000b2 910f                      	SHIELDSETUP
                                 
0000b3 e400                      	LDI r16, 0b01000000
0000b4 9300 00c0                 	STS UCSR0A, r16
0000b6 e008                      	LDI r16, 0b00001000
0000b7 9300 00c1                 	STS UCSR0B, r16
0000b9 e00e                      	LDI r16, 0b00001110
0000ba 9300 00c2                 	STS UCSR0C, r16
0000bc e00f                      	LDI r16, 0b00001111
0000bd 9300 00c5                 	STS UBRR0H, r16
0000bf ef0f                      	LDI r16, 0b11111111
0000c0 9300 00c4                 	STS UBRR0L, r16
                                 
0000c2 e002                      	LDI r16, 0b00000010
0000c3 9300 006c                 	STS PCMSK1, r16
0000c5 9300 0068                 	STS PCICR, r16
                                 
0000c7 9478                      sei
                                 program:
0000c8 cfff                      	rJMP program
                                 
                                 ; WRITEBYTE <input> <reg2> <reg3> <reg4>
                                 .MACRO WRITEBYTE
                                 	PUSH @0
                                 	PUSH @1
                                 	PUSH @2
                                 	PUSH @3
                                 
                                 	BYTETONIBBLE @0, @1, @2
                                 	NIBBLETOHAMMING @1, @3, @0, @2
                                 	STS UDR0, @3
                                 	NIBBLETOHAMMING @2, @3, @0, @1
                                 	LSR @3
                                 	STS tmr1_hamming_buffer, @3
                                 
                                 	POP @3
                                 	POP @2
                                 	POP @1
                                 	POP @0
                                 .ENDMACRO
                                 
                                 // pcint1 interruption
                                 pcint1_start:
0000c9 920f                      	PUSH r0
0000ca b60f                      	IN r0, SREG
0000cb 920f                      	PUSH r0
0000cc 930f                      	PUSH r16
                                 
0000cd 9100 0318                 	LDS r16, tmr1_state
0000cf 3f0f                      	CPI r16, 0xFF
0000d0 f419                      	BRNE pcint1_end
                                 
0000d1 e000                      	LDI r16, 0
0000d2 9300 0318                 	STS tmr1_state, r16
                                 
                                 pcint1_end:
0000d4 910f                      	POP r16
0000d5 900f                      	POP r0
0000d6 be0f                      	OUT SREG, r0
0000d7 900f                      	POP r0
0000d8 9518                      	RETI
                                 
                                 // timer 1 interruption
                                 .DSEG
000318                           	tmr1_state: .BYTE 1
000319                           	tmr1_counter: .BYTE 2
00031b                           	tmr1_hamming_buffer: .BYTE 1
00031c                           	tmr1_checksum: .BYTE 2
                                 .CSEG
                                 tmr1_start:
0000d9 920f                      	PUSH r0
0000da b60f                      	IN r0, SREG
0000db 920f                      	PUSH r0
0000dc 930f                      	PUSH r16
0000dd 931f                      	PUSH r17
                                 
0000de 9110 0318                 	LDS r17, tmr1_state
0000e0 3f1f                      	CPI r17, -1
0000e1 f039                      		BREQ tmr1_end
0000e2 3010                      	CPI r17, 0
0000e3 f019                      		BREQ tmr1_call_write_data
                                 
0000e4 940e 015c                 	CALL send_data
0000e6 c002                      	RJMP tmr1_end
                                 
                                 	tmr1_call_write_data:
0000e7 940e 00ef                 		CALL write_data
                                 	
                                 tmr1_end:
0000e9 911f                      	POP r17
0000ea 910f                      	POP r16
0000eb 900f                      	POP r0
0000ec be0f                      	OUT SREG, r0
0000ed 900f                      	POP r0
0000ee 9518                      	RETI
                                 
                                 // void send_data();
                                 write_data:
0000ef 930f                      	PUSH r16
0000f0 931f                      	PUSH r17
0000f1 932f                      	PUSH r18
0000f2 933f                      	PUSH r19
0000f3 934f                      	PUSH r20
0000f4 935f                      	PUSH r21
                                 
0000f5 940e 0226                 	CALL generate_pseudorandom_number
0000f7 2f10                      	MOV r17, r16
                                 
0000f8 9120 0319                 	LDS r18, tmr1_counter + 0
0000fa 9130 031a                 	LDS r19, tmr1_counter + 1
                                 
0000fc e0f1
0000fd e0e0                      	SETZ data_buffer
0000fe 0ff2
0000ff 0fe3
000100 f408
000101 95f3                      	SUMZW r18, r19
000102 8310                      	ST Z, r17
                                 
000103 9140 031c                 	LDS r20, tmr1_checksum + 0
000105 9150 031d                 	LDS r21, tmr1_checksum + 1
000107 0f51
000108 f408
000109 9543                      	ADDW1 r20, r21, r17
00010a 9340 031c                 	STS tmr1_checksum + 0, r20
00010c 9350 031d                 	STS tmr1_checksum + 1, r21
                                 
00010e 9533
00010f f409
000110 9523                      	INCW r18, r19
000111 9320 0319                 	STS tmr1_counter + 0, r18
000113 9330 031a                 	STS tmr1_counter + 1, r19
                                 
000115 3022
000116 f409
000117 3030                      	CPWI r18, r19, BUFFER_SIZE
000118 f5e1                      	BRNE writedata_end
                                 	
000119 936f                      		PUSH r22
00011a 937f                      		PUSH r23
00011b 938f                      		PUSH r24
                                 
00011c 2f64
00011d 9566
00011e 9566
00011f 9566
000120 9566
000121 2f74
000122 707f                      		BYTETONIBBLE r20, r22, r23
000123 e0f3
000124 e0e4
000125 0fe6
000126 f408
000127 95f3
000128 8180                      		LOADBYTEFROMSLICE r24, shield_digits, r22
000129 9380 0300                 		STS shield_buffer + 0, r24
00012b e0f3
00012c e0e4
00012d 0fe7
00012e f408
00012f 95f3
000130 8180                      		LOADBYTEFROMSLICE r24, shield_digits, r23
000131 9380 0301                 		STS shield_buffer + 1, r24
                                 
000133 2f65
000134 9566
000135 9566
000136 9566
000137 9566
000138 2f75
000139 707f                      		BYTETONIBBLE r21, r22, r23
00013a e0f3
00013b e0e4
00013c 0fe6
00013d f408
00013e 95f3
00013f 8180                      		LOADBYTEFROMSLICE r24, shield_digits, r22
000140 9380 0302                 		STS shield_buffer + 2, r24
000142 e0f3
000143 e0e4
000144 0fe7
000145 f408
000146 95f3
000147 8180                      		LOADBYTEFROMSLICE r24, shield_digits, r23
000148 9380 0303                 		STS shield_buffer + 3, r24
                                 
00014a 918f                      		POP r24
00014b 917f                      		POP r23
00014c 916f                      		POP r22
                                 
00014d e051                      	LDI r21, 1
00014e 9350 0318                 	STS tmr1_state, r21
                                 
000150 e050                      	LDI r21, 0
000151 9350 0319                 	STS tmr1_counter + 0, r21
000153 9350 031a                 	STS tmr1_counter + 1, r21
                                 
                                 writedata_end:
000155 915f                      	POP r21
000156 914f                      	POP r20
000157 913f                      	POP r19
000158 912f                      	POP r18
000159 911f                      	POP r17
00015a 910f                      	POP r16
00015b 9508                      	RET
                                 
                                 // void send_data();
                                 send_data:
00015c 930f                      	PUSH r16
00015d 931f                      	PUSH r17
00015e 932f                      	PUSH r18
00015f 933f                      	PUSH r19
000160 934f                      	PUSH r20
                                 
000161 9110 0319                 	LDS r17, tmr1_counter + 0
000163 9120 031a                 	LDS r18, tmr1_counter + 1
                                 
000165 3012
000166 f409
000167 3020                      	CPWI r17, r18, BUFFER_SIZE
000168 f408                      	BRSH senddata_end0
000169 c002                      	RJMP senddata_continue0
                                 
                                 	senddata_end0:
00016a 940c 01e7                 		JMP senddata_end
                                 	senddata_continue0:
                                 
00016c 940e 01ed                 	CALL can_write
00016e 3000                      	CPI r16, 0
00016f f3d1                      	BREQ senddata_end0
                                 
000170 9130 031b                 	LDS r19, tmr1_hamming_buffer
000172 2f43                      	MOV r20, r19
000173 673f                      	ORI r19, 0b01111111
000174 3f3f                      	CPI r19, 0xFF
000175 f0d1                      	BREQ senddata_write_normal
000176 0f44                      		LSL r20
000177 9340 00c6                 		STS UDR0, r20
000179 ef4f                      		LDI r20, 0b11111111
00017a 9340 031b                 		STS tmr1_hamming_buffer, r20
                                 
00017c 9523
00017d f409
00017e 9513                      		INCW r17, r18
00017f 9310 0319                 		STS tmr1_counter + 0, r17
000181 9320 031a                 		STS tmr1_counter + 1, r18
                                 
000183 3012
000184 f409
000185 3020                      		CPWI r17, r18, BUFFER_SIZE
000186 f318                      		BRLO senddata_end0
                                 
000187 9100 006c                 			LDS r16, PCMSK1
000189 7f0d                      			ANDI r16, 0b11111101
00018a 9300 006c                 			STS PCMSK1, r16
00018c e000                      			LDI r16, 0b00000000
00018d 9300 00c1                 			STS UCSR0B, r16
                                 
00018f c057                      		RJMP senddata_end
                                 
                                 	senddata_write_normal:
000190 e0f1
000191 e0e0                      		SETZ data_buffer
000192 0ff1
000193 0fe2
000194 f408
000195 95f3                      		SUMZW r17, r18
000196 8130                      		LD r19, Z
000197 933f
000198 932f
000199 931f
00019a 930f
00019b 2f23
00019c 9526
00019d 9526
00019e 9526
00019f 9526
0001a0 2f13
0001a1 701f
0001a2 933f
0001a3 931f
0001a4 2733
0001a5 2700
0001a6 2f32
0001a7 6f3e
0001a8 3f3f
0001a9 f411
0001aa e01e
0001ab 2701
0001ac 2f32
0001ad 6f3d
0001ae 3f3f
0001af f411
0001b0 e312
0001b1 2701
0001b2 2f32
0001b3 6f3b
0001b4 3f3f
0001b5 f411
0001b6 e514
0001b7 2701
0001b8 2f32
0001b9 6f37
0001ba 3f3f
0001bb f411
0001bc e916
0001bd 2701
0001be 911f
0001bf 913f
0001c0 9300 00c6
0001c2 933f
0001c3 932f
0001c4 2733
0001c5 2700
0001c6 2f31
0001c7 6f3e
0001c8 3f3f
0001c9 f411
0001ca e02e
0001cb 2702
0001cc 2f31
0001cd 6f3d
0001ce 3f3f
0001cf f411
0001d0 e322
0001d1 2702
0001d2 2f31
0001d3 6f3b
0001d4 3f3f
0001d5 f411
0001d6 e524
0001d7 2702
0001d8 2f31
0001d9 6f37
0001da 3f3f
0001db f411
0001dc e926
0001dd 2702
0001de 912f
0001df 913f
0001e0 9506
0001e1 9300 031b
0001e3 910f
0001e4 911f
0001e5 912f
0001e6 913f                      		WRITEBYTE r19, r18, r17, r16
                                 
                                 senddata_end:
0001e7 914f                      	POP r20
0001e8 913f                      	POP r19
0001e9 912f                      	POP r18
0001ea 911f                      	POP r17
0001eb 910f                      	POP r16
0001ec 9508                      	RET
                                 
                                 // byte can_write();
                                 can_write:
0001ed 9100 00c0                 	LDS r16, UCSR0A
0001ef 6d0f                      	ORI r16, 0b11011111
0001f0 3f0f                      	CPI r16, 0xFF
0001f1 b70f                      	IN r16, SREG
0001f2 9506                      	LSR r16
0001f3 7001                      	ANDI r16, 0b00000001
0001f4 9508                      	RET
                                 
                                 // timer 0 interruption
                                 tmr0_start:
0001f5 920f                      	PUSH r0
0001f6 b60f                      	IN r0, SREG
0001f7 920f                      	PUSH r0
0001f8 930f                      	PUSH r16
                                 
0001f9 940e 0200                 	CALL display_shield
                                 
                                 tmr0_end:
0001fb 910f                      	POP r16
0001fc 900f                      	POP r0
0001fd be0f                      	OUT SREG, r0
0001fe 900f                      	POP r0
0001ff 9518                      	RETI
                                 
                                 // display_shield(): void
                                 ; The first thing to call in receiver timer
                                 .DSEG
00031e                           	display_shield_digit: .BYTE 1
                                 .CSEG
                                 display_shield:
000200 920f                      	PUSH r0
000201 b60f                      	IN r0, SREG
000202 920f                      	PUSH r0
000203 930f                      	PUSH r16
000204 936f                      	PUSH r22
000205 921f                      	PUSH r1
000206 922f                      	PUSH r2
000207 9160 031e                 	LDS r22, display_shield_digit
                                 
000209 e0f3
00020a e0e0                      	SETZ shield_buffer
00020b 0fe6
00020c f408
00020d 95f3                      	SUMZ r22
00020e 8010                      	LD r1, Z
                                 
00020f e0f3
000210 e1e4                      	SETZ digits_buffer
000211 0fe6
000212 f408
000213 95f3                      	SUMZ r22
000214 8020                      	LD r2, Z
                                 
000215 940e 001e                 	CALL write_shield
                                 
000217 9563                      	INC r22
000218 3064                      	CPI r22, 4
000219 f051                      	BREQ display_shield_reset
                                 
                                 display_shield_end:
00021a 9360 031e                 	STS display_shield_digit, r22
00021c 902f                      	POP r2
00021d 901f                      	POP r1
00021e 916f                      	POP r22
00021f 910f                      	POP r16
000220 900f                      	POP r0
000221 be0f                      	OUT SREG, r0
000222 900f                      	POP r0
000223 9508                      	RET
                                 
                                 display_shield_reset:
000224 e060                      	LDI r22, 0
000225 cff4                      	RJMP display_shield_end
                                 
                                 // byte generate_pseudorandom_number();
                                 .DSEG
00031f                           	pseudorand_mem: .BYTE 1
                                 .CSEG
                                 generate_pseudorandom_number:
000226 931f                      	PUSH r17
000227 9100 031f                 	LDS r16, pseudorand_mem
                                 
000229 2f10                      	MOV r17, r16
00022a 0f11                      	LSL r17
00022b 0f11                      	LSL r17
00022c 0f11                      	LSL r17
00022d 2701                      	EOR r16, r17
00022e 2f10                      	MOV r17, r16
00022f 9516                      	LSR r17
000230 9516                      	LSR r17
000231 9516                      	LSR r17
000232 9516                      	LSR r17
000233 9516                      	LSR r17
000234 2701                      	EOR r16, r17
                                 
000235 9300 031f                 	STS pseudorand_mem, r16
000237 911f                      	POP r17
000238 9508                      	RET


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :  39 r0 :  24 r1 :   5 r2 :   4 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 170 r17:  50 r18:  38 r19:  48 r20:  14 
r21:  12 r22:  23 r23:   8 r24:  10 r25:   0 r26:   0 r27:   0 r28:   0 
r29:   0 r30:  24 r31:  26 
Registers used: 15 out of 35 (42.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :  11 adiw  :   0 and   :   0 
andi  :   6 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   9 brcs  :   1 break :   0 breq  :   5 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :  16 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   8 cbi   :   3 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   4 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  21 cpse  :   0 dec   :   1 eor   :  10 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   9 inc   :  14 jmp   :   5 
ld    :   7 ldd   :   0 ldi   :  96 lds   :  14 lpm   :   0 lsl   :   4 
lsr   :  20 mov   :  19 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :  14 out   :  17 pop   :  41 
push  :  41 rcall :   0 ret   :   7 reti  :   3 rjmp  :   6 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   3 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  32 std   :   0 sts   :  35 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 34 out of 113 (30.1%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000472   1094      0   1094   32768   3.3%
[.dseg] 0x000100 0x000320      0    544    544    2048  26.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
